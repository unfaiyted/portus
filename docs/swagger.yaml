basePath: /api/v1
definitions:
  models.APIResponse-models_ShortenData:
    properties:
      data:
        $ref: '#/definitions/models.ShortenData'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.ErrorResponse:
    properties:
      details:
        additionalProperties: true
        type: object
      error:
        allOf:
        - $ref: '#/definitions/models.ErrorType'
        example: FAILED_CHECK
      message:
        example: This is a pretty message
        type: string
      request_id:
        type: string
      timestamp:
        type: string
    type: object
  models.ErrorType:
    enum:
    - FAILED_CHECK
    - UNAUTHORIZED
    - NOT_FOUND
    - BAD_REQUEST
    - INTERNAL_ERROR
    - FORBIDDEN
    - CONFLICT
    - VALIDATION_ERROR
    - RATE_LIMITED
    - TIMEOUT
    - SERVICE_UNAVAILABLE
    - UNPROCESSABLE_ENTITY
    type: string
    x-enum-varnames:
    - ErrorTypeFailedCheck
    - ErrorTypeUnauthorized
    - ErrorTypeNotFound
    - ErrorTypeBadRequest
    - ErrorTypeInternalError
    - ErrorTypeForbidden
    - ErrorTypeConflict
    - ErrorTypeValidation
    - ErrorTypeRateLimited
    - ErrorTypeTimeout
    - ErrorTypeServiceUnavailable
    - ErrorTypeUnprocessableEntity
  models.GetByOriginalURLRequest:
    properties:
      createIfNotExists:
        type: boolean
      customCode:
        type: string
      expiresAfter:
        type: integer
      originalUrl:
        type: string
    required:
    - originalUrl
    type: object
  models.HealthResponse:
    properties:
      application:
        example: true
        type: boolean
      database:
        example: true
        type: boolean
      status:
        description: Overall status of the system
        enum:
        - up
        - down
        - degraded
        example: up
        type: string
    required:
    - application
    - database
    - status
    type: object
  models.Shorten:
    properties:
      clickCount:
        example: 0
        type: integer
      createdAt:
        type: string
      expiresAt:
        type: string
      id:
        example: 1
        type: integer
      originalUrl:
        example: https://example.com/some/long/path
        type: string
      shortCode:
        example: abc123
        type: string
      updatedAt:
        type: string
    required:
    - originalUrl
    type: object
  models.ShortenData:
    properties:
      shorten:
        $ref: '#/definitions/models.Shorten'
    type: object
  models.ShortenRequest:
    properties:
      customCode:
        type: string
      expiresAfter:
        description: In days
        type: integer
      originalUrl:
        type: string
    required:
    - originalUrl
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Server for Portus URL Shortener
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Portus API
  version: "1.0"
paths:
  /health:
    get:
      description: returns JSON object with health statuses.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HealthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: checks app and database health
      tags:
      - health
  /shorten:
    post:
      consumes:
      - application/json
      description: Creates a new shortened URL from a long URL, with optional custom
        code and expiration. If no custom code is provided, one will be generated.
      parameters:
      - description: URL to shorten
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ShortenRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created shortened URL
          schema:
            $ref: '#/definitions/models.APIResponse-models_ShortenData'
        "400":
          description: Invalid request format or short code already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a shortened URL
      tags:
      - shorten
  /shorten/{code}:
    delete:
      description: Deletes an existing shortened URL by its short code
      parameters:
      - description: Short code identifier
        in: path
        name: code
        required: true
        type: string
      responses:
        "204":
          description: No Content - URL successfully deleted
        "400":
          description: Bad request - missing code parameter
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Short URL not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a shortened URL
      tags:
      - shorten
    get:
      description: Redirects to the original URL from a short code
      parameters:
      - description: Short code identifier
        in: path
        name: code
        required: true
        type: string
      responses:
        "302":
          description: Found - Redirects to the original URL
          headers:
            Location:
              description: The URL to redirect to
              type: string
        "400":
          description: Bad request - missing code parameter
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Short URL not found or has expired
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Redirect to original URL
      tags:
      - shorten
    put:
      consumes:
      - application/json
      description: Updates an existing shortened URL by its short code
      parameters:
      - description: Short code identifier
        in: path
        name: code
        required: true
        type: string
      - description: Updated URL data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ShortenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated shortened URL
          schema:
            $ref: '#/definitions/models.APIResponse-models_ShortenData'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Short URL not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a shortened URL
      tags:
      - shorten
  /shorten/lookup:
    post:
      consumes:
      - application/json
      description: Checks if an original URL already has a short code and optionally
        creates one if it doesn't exist
      parameters:
      - description: Original URL to check
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GetByOriginalURLRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved shortened URL information
          schema:
            $ref: '#/definitions/models.APIResponse-models_ShortenData'
        "201":
          description: Successfully created new shortened URL
          schema:
            $ref: '#/definitions/models.APIResponse-models_ShortenData'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Original URL not found and createIfNotExists is false
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Check if a URL is already shortened
      tags:
      - shorten
schemes:
- http
swagger: "2.0"
