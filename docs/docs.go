// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "returns JSON object with health statuses.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "checks app and database health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.HealthResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/shorten": {
            "post": {
                "description": "Creates a new shortened URL from a long URL, with optional custom code and expiration. If no custom code is provided, one will be generated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "shorten"
                ],
                "summary": "Create a shortened URL",
                "parameters": [
                    {
                        "description": "URL to shorten",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ShortenRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created shortened URL",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse-models_ShortenData"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or short code already exists",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/shorten/lookup": {
            "post": {
                "description": "Checks if an original URL already has a short code and optionally creates one if it doesn't exist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "shorten"
                ],
                "summary": "Check if a URL is already shortened",
                "parameters": [
                    {
                        "description": "Original URL to check",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GetByOriginalURLRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved shortened URL information",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse-models_ShortenData"
                        }
                    },
                    "201": {
                        "description": "Successfully created new shortened URL",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse-models_ShortenData"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Original URL not found and createIfNotExists is false",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/shorten/{code}": {
            "get": {
                "description": "Redirects to the original URL from a short code",
                "tags": [
                    "shorten"
                ],
                "summary": "Redirect to original URL",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Short code identifier",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Found - Redirects to the original URL",
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "The URL to redirect to"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - missing code parameter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Short URL not found or has expired",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing shortened URL by its short code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "shorten"
                ],
                "summary": "Update a shortened URL",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Short code identifier",
                        "name": "code",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated URL data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ShortenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated shortened URL",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse-models_ShortenData"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Short URL not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an existing shortened URL by its short code",
                "tags": [
                    "shorten"
                ],
                "summary": "Delete a shortened URL",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Short code identifier",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content - URL successfully deleted"
                    },
                    "400": {
                        "description": "Bad request - missing code parameter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Short URL not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.APIResponse-models_ShortenData": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.ShortenData"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": true
                },
                "error": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ErrorType"
                        }
                    ],
                    "example": "FAILED_CHECK"
                },
                "message": {
                    "type": "string",
                    "example": "This is a pretty message"
                },
                "request_id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "models.ErrorType": {
            "type": "string",
            "enum": [
                "FAILED_CHECK",
                "UNAUTHORIZED",
                "NOT_FOUND",
                "BAD_REQUEST",
                "INTERNAL_ERROR",
                "FORBIDDEN",
                "CONFLICT",
                "VALIDATION_ERROR",
                "RATE_LIMITED",
                "TIMEOUT",
                "SERVICE_UNAVAILABLE",
                "UNPROCESSABLE_ENTITY"
            ],
            "x-enum-varnames": [
                "ErrorTypeFailedCheck",
                "ErrorTypeUnauthorized",
                "ErrorTypeNotFound",
                "ErrorTypeBadRequest",
                "ErrorTypeInternalError",
                "ErrorTypeForbidden",
                "ErrorTypeConflict",
                "ErrorTypeValidation",
                "ErrorTypeRateLimited",
                "ErrorTypeTimeout",
                "ErrorTypeServiceUnavailable",
                "ErrorTypeUnprocessableEntity"
            ]
        },
        "models.GetByOriginalURLRequest": {
            "type": "object",
            "required": [
                "originalUrl"
            ],
            "properties": {
                "createIfNotExists": {
                    "type": "boolean"
                },
                "customCode": {
                    "type": "string"
                },
                "expiresAfter": {
                    "type": "integer"
                },
                "originalUrl": {
                    "type": "string"
                }
            }
        },
        "models.HealthResponse": {
            "type": "object",
            "required": [
                "application",
                "database",
                "status"
            ],
            "properties": {
                "application": {
                    "type": "boolean",
                    "example": true
                },
                "database": {
                    "type": "boolean",
                    "example": true
                },
                "status": {
                    "description": "Overall status of the system",
                    "type": "string",
                    "enum": [
                        "up",
                        "down",
                        "degraded"
                    ],
                    "example": "up"
                }
            }
        },
        "models.Shorten": {
            "type": "object",
            "required": [
                "originalUrl"
            ],
            "properties": {
                "clickCount": {
                    "type": "integer",
                    "example": 0
                },
                "createdAt": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "originalUrl": {
                    "type": "string",
                    "example": "https://example.com/some/long/path"
                },
                "shortCode": {
                    "type": "string",
                    "example": "abc123"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.ShortenData": {
            "type": "object",
            "properties": {
                "shorten": {
                    "$ref": "#/definitions/models.Shorten"
                }
            }
        },
        "models.ShortenRequest": {
            "type": "object",
            "required": [
                "originalUrl"
            ],
            "properties": {
                "customCode": {
                    "type": "string"
                },
                "expiresAfter": {
                    "description": "In days",
                    "type": "integer"
                },
                "originalUrl": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "Portus API",
	Description:      "API Server for Portus URL Shortener",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
